// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int @id @default(autoincrement())
  savedPost Post[] @relation("save")
  
  avatar File? 
  firstname String 
  email    String @unique
  password String?
  role Role @default(user) 
  lastname String
  fullname String?
  requestSent FriendRequest[] @relation("send")
  requestReceived FriendRequest[] @relation("receive")
  conversations ConversationMember[]
  posts Post[]
  detail UserDetail?
  sendComments Comment[] @relation("'sender'")
  receiveComments Comment[] @relation("receiver")
  reacts PostUserReact[] 
  resetPasswordCode ResetPasswordCode?
  createdAt DateTime @default(now())
 
  adminGroups Group[] @relation("admin")
  createGroups Group[] @relation("create")
  groupRequests GroupReqest[]
  sendNotifications Notification[] @relation("send_notify")
  receiveNotifications Notification[] @relation("receive_notify")
  reactComments CommentReact[]
  viewStories Story[] 
  stories Story[] @relation("stories")
  reactStories ReactStory[]
  commentsStory CommentStory[]
  taggedPosts Post[] @relation("tag")

  reactMessages MessageReact[]
  reports Report[]

  @@map("users")
}

model UserDetail {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverImage File? 
  
  // birthday DateTime? @db.Date 
  birthday DateTime?  
  country String?
  state String?
  intro String?
  website String?
  phone String?
  gender gender?
  @@map("user_details")
}
model ResetPasswordCode {
  id Int @id @default(autoincrement())
  userId Int? @unique
  user User? @relation(fields: [userId], references: [id])
  value Int 
  expireTime DateTime
  @@map("reset_password_codes")
}



model FriendRequest {
  id Int @id @default(autoincrement())
  senderId Int
  sender User @relation("send",fields: [senderId], references: [id], onDelete: Cascade)
  receiverId Int
  receiver User @relation("receive",fields: [receiverId], references: [id], onDelete: Cascade)
  status Status  @default(waiting)
  createdAt DateTime @default(now())

  @@unique([senderId, receiverId])
  @@unique([receiverId, senderId])
  @@map("friend_requests")
}

model File {
  id Int @id @default(autoincrement())
  avatarOfUserId Int? @unique
  avatarOfUser User?  @relation(fields: [avatarOfUserId], references: [id], onDelete: Cascade)
  coverImageOfUserDetail UserDetail? @relation(fields: [coverImageOfUserDetailId], references: [id], onDelete: SetNull)
 coverImageOfUserDetailId Int? @unique
  name String
  url String
  thumbnail String?
  createdAt DateTime @default(now())
  postId Int?
  post Post? @relation(fields: [postId], references: [id], onDelete: SetNull)
  messageId Int?
  message Message? @relation(fields: [messageId], references: [id], onDelete: SetNull)
  groupId Int? @unique
  group Group? @relation(fields: [groupId], references:[id])
  story Story?
  reportId Int?
  report Report? @relation(fields: [reportId], references: [id], onDelete: SetNull)

  @@map("files")
}

model Post {
  id Int @id @default(autoincrement())
  text String?
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  location Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files File[]
  comments Comment[]
  reacts PostUserReact[]
  privacy access? @default(public)
  negative Boolean?
  shareId Int?
  share Post? @relation("share", fields: [shareId], references: [id], onDelete: SetNull)
  shareBys Post[] @relation("share")
  tags User[] @relation("tag")
  feel Json?
  accepted Boolean? @default(true)
  groupId Int?
  group Group? @relation(fields: [groupId], references: [id], onDelete: Cascade)
  reports Report[]
  saveBys User[] @relation("save")

  @@map("posts")
}




model Group {
  id Int @id @default(autoincrement())
  name String @unique
  description String?
  privacy  accessGroup
  requireApproval Boolean @default(true)
  creatorId Int?
  adminId Int
  creator User? @relation("create",fields: [creatorId], references: [id], onDelete: SetNull)
  admin User @relation("admin",fields: [adminId], references: [id], onDelete: Cascade)
  image File?
  requests GroupReqest[]
  createdAt DateTime @default(now())
  posts Post[]
  

  @@map("groups")

}



model GroupReqest {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  groupId Int
  group Group @relation(fields: [groupId], references: [id])
  status Status
  type groupRequestType
  createdAt DateTime @default(now())

  @@unique([userId, groupId])

  @@map("group_requests")
}







model Conversation {
  id Int @id @default(autoincrement())
  isGroup Boolean @default(false)
  name String?
  members ConversationMember[]
  lastMessage Json?
   @@map("conversations")
   updatedAt DateTime @updatedAt
}

model ConversationMember{
  id Int @id @default(autoincrement())
  conversationId Int
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId Int
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  isSeen  Boolean @default(false)
  isAdmin Boolean @default(false)
  messages Message[]
  @@unique([conversationId, userId])

   @@map("conversation_members")

}

model Message {
  id Int @id @default(autoincrement())
  text String
  memberId Int
  member ConversationMember @relation(fields: [memberId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  files File[]
  reacts MessageReact[]
   @@map("messages")
}

model MessageReact {
  id Int @id @default(autoincrement())
  userId Int
  messageId Int
  user User @relation(fields: [userId], references: [id], onDelete:Cascade)
  message Message @relation(fields: [messageId], references: [id], onDelete:Cascade)
}

model React {
  id Int @id @default(autoincrement())
  name String
  icon String
  posts PostUserReact[]
   @@map("reacts")

   stories ReactStory[]
}

model Notification {
  id Int @id @default(autoincrement())
  senderId Int?
  sender User? @relation("send_notify",fields: [senderId], references: [id])
  receiverId Int
  receiver User? @relation("receive_notify",fields: [receiverId], references: [id])
  isSeen Boolean @default(false)
  content  String?
  text String?
  url String?
  type String?
  target Json?
  createdAt DateTime @default(now())


  @@map("notifications")
}

model Comment {
  id Int @id @default(autoincrement())
  postId Int
  parentId Int?
  senderId Int
  receiverId Int?
  content String
  negative Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  sender User @relation( "'sender'",fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation("receiver",fields: [receiverId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("answer",fields: [parentId], references: [id])
  answers Comment[] @relation("answer")
  reacts CommentReact[]

   @@map("comments")

}

model CommentReact {
  id Int @id @default(autoincrement())
  userId Int
  commentId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  type commentReact

  @@unique([userId, commentId])

  @@map("comment_reacts")
}

model PostUserReact {
  id Int @id @default(autoincrement())
  postId Int
  userId Int
  reactId Int
  post Post @relation(references: [id], fields: [postId], onDelete: Cascade)
  react React @relation(references: [id], fields: [reactId], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([postId, userId])
   @@map("post_user_reacts")
}


model Story {
  id Int @id @default(autoincrement())
  userId Int? 
  createdAt DateTime @default(now())
  song Json?
  videoId Int? @unique
  video File?  @relation(references: [id], fields: [videoId])
 
mutedOriginal Boolean @default(false)
views User[] 
user User? @relation("stories",fields: [userId], references: [id] , onDelete: Cascade)
reacts ReactStory[]
comments CommentStory[]
@@map("stories")
texts StoryText[]
}

model StoryText {
  id Int @id @default(autoincrement())
  storyId Int
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  content String
  x Float
  y Float
  @@map("story_texts")

}







model CommentStory {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)
  content String
  storyId Int
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@map("comment_story")

}

model ReactStory {
  id Int @id @default(autoincrement())
userId Int
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
reactId Int
storyId Int
story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

react React @relation(fields: [reactId], references: [id], onDelete: Cascade)
@@unique([storyId, userId])
@@map("react_story")
}


model Report {
  id Int @id @default(autoincrement())
  postId Int
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  type  report
  files File[]
  description String?

  @@map("reports")

}

// model  ViewStory {
//   id Int @id @default(autoincrement())
//   userId Int
//   storyId Int
// }



enum Role {
  user
  admin
}

enum Status {
  waiting
  accepted
}

enum gender {
  male
  female
  other
}

enum accessGroup {
private 
public
}


enum access {
  private
  public
  friend
}

enum groupRequestType {
  invite
  join
}

enum commentReact {
   like
   dislike
}


enum notify {
  iviteGroup

}

enum report {
  negative
  spam
  fake
}

